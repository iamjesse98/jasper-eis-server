{"version":3,"sources":["../src/index.js"],"names":["PORT","port","app","server","createServer","io","pingTimeout","get","req","res","send","sockets","on","console","log","socket","id","options","mode","scriptPath","__dirname","args","data","msg","run","err","results","emit","message","listen","process","env","address"],"mappings":";;AACA;;;;AACA;;;;AACA;;AACA;;;;AAGA;;;;;;AAAoC;;AAEpC;AANmC;AAFL;AAS9B,IAAMA,OAAO,iBAAOC,IAApB,C,CANuC;;AAEvC;AAJwB;AAFxB;;AAWA,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAMG,KAAK,oBAAOH,IAAIC,MAAX,EAAmB,EAAEG,aAAa,KAAf,EAAnB,CAAX,C,CAAsD;;AAEtD;AACAJ,IAAIK,GAAJ,CAAQ,IAAR,EAAc,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,IAAJ,CAAS,OAAT,CAAd;AAAA,CAAd,E,CAA+C;;AAE/C;AACAL,GAAGM,OAAH,CAAWC,EAAX,CAAc,YAAd,EAA4B,kBAAU;AAClCC,YAAQC,GAAR,CAAY,yBAAZ,EAAuCC,OAAOC,EAA9C;AACAD,WAAOH,EAAP,CAAU,SAAV,EAAqB,gBAAQ;AAC5B;AACG,YAAMK,UAAU;AACZC,kBAAM,MADM;AAEZC,wBAAYC,YAAY,MAFZ;AAGZC,kBAAM,CAAEC,KAAKC,GAAP;AAHM,SAAhB;AAKA,8BAAYC,GAAZ,CAAgB,QAAhB,EAA0BP,OAA1B,EAAmC,UAACQ,GAAD,EAAMC,OAAN,EAAkB;AACjD,gBAAID,GAAJ,EAAS,MAAMA,GAAN;AACT;AACAZ,oBAAQC,GAAR,CAAYY,QAAQ,CAAR,CAAZ;AACH,SAJD;AAKAX,eAAOY,IAAP,CAAY,OAAZ,EAAqB,EAAEC,SAASN,KAAKC,GAAhB,EAArB;AACH,KAbD;AAcH,CAhBD;;AAkBA;AACArB,IAAIC,MAAJ,CAAW0B,MAAX,CAAkBC,QAAQC,GAAR,CAAY/B,IAAZ,IAAoBA,IAAtC,EAA4C;AAAA,WAAKa,QAAQC,GAAR,uBAAgCZ,IAAIC,MAAJ,CAAW6B,OAAX,GAAqB/B,IAArD,CAAL;AAAA,CAA5C","file":"index.js","sourcesContent":["// all module imports here\r\nimport express from 'express' // for rendering documents and handling requests\r\nimport http from 'http' // http connects both express and socket.io\r\nimport { listen } from 'socket.io' // for real time data streaming\r\nimport PythonShell from 'python-shell' // for doing nlp\r\n\r\n// all relative imports here\r\nimport config from '../config.json' // this file contains all the configs.\r\n\r\n// global variables\r\nconst PORT = config.port\r\nconst app = express()\r\napp.server = http.createServer(app)\r\nconst io = listen(app.server, { pingTimeout: 30000 }) // { pingTimeout: 30000 } => makes compatible with react-native\r\n\r\n// all http routes here\r\napp.get('/*', (req, res) => res.send('hello')) // TODO: render the actual frontend\r\n\r\n// all socket routes goes here\r\nio.sockets.on('connection', socket => {\r\n    console.log('A fucker just joined on', socket.id)\r\n    socket.on('message', data => {\r\n    \t// process the message here... using nlp techniques, then emit the reply to client and also to raspberry pi server\r\n        const options = {\r\n            mode: 'text',\r\n            scriptPath: __dirname + '/../',\r\n            args: [ data.msg ]\r\n        }\r\n        PythonShell.run('nlp.py', options, (err, results) => {\r\n            if (err) throw err;\r\n            // results is an array consisting of messages collected during execution\r\n            console.log(results[0]);\r\n        })\r\n        socket.emit('reply', { message: data.msg })\r\n    })\r\n})\r\n\r\n// tell our app to listen to our port\r\napp.server.listen(process.env.PORT || PORT, _ => console.log(`Magic happens on ${app.server.address().port}`))"]}